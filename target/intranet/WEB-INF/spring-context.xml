<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd    
        	http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
        	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
        	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
       		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.0.xsd">

	<context:component-scan base-package="br.com.hermeto.intranet" />

	<mvc:annotation-driven />
	<mvc:default-servlet-handler />
	<mvc:interceptors> <bean class="br.com.hermeto.intranet.interceptor.AutorizadorInterceptor" 
		/> </mvc:interceptors>

	<tx:annotation-driven />

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"> 
		<!-- one of the properties available; the maximum file size in bytes  -->
		<property  name="maxUploadSize" value="100000000" /> 
	</bean>

	<mvc:resources mapping="/static/**" location="/static/" />

	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/" />
		<property name="suffix" value=".jsp" />
	</bean>

	<!-- This produces a container-managed EntityManagerFactory; rather than 
		application-managed EntityManagerFactory as in case of LocalEntityManagerFactoryBean -->
	<bean id="entityManagerFactoryBean"
		class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- This makes /META-INF/persistence.xml is no longer necessary -->
		<property name="packagesToScan" value="br.com.hermeto.intranet.model" />
		<!-- JpaVendorAdapter implementation for Hibernate EntityManager. Exposes 
			Hibernate's persistence provider and EntityManager extension interface -->
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter" />
		</property>
		<property name="jpaProperties">
			<props>
				<prop key="hibernate.show_sql">true</prop>
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQL5Dialect</prop>
			</props>
		</property>
	</bean>

	<!-- Simple implementation of the standard JDBC DataSource interface, configuring 
		the plain old JDBC DriverManager via bean properties -->
	<bean id="dataSource"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<property name="url" value="jdbc:mysql://localhost:3306/centro_intranet" />
		<property name="username" value="root" />
		<property name="password" value="" />
	</bean>

	<!-- This transaction manager is appropriate for applications that use a 
		single JPA EntityManagerFactory for transactional data access. JTA (usually 
		through JtaTransactionManager) is necessary for accessing multiple transactional 
		resources within the same transaction. -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactoryBean" />
	</bean>

	<tx:annotation-driven />
</beans>